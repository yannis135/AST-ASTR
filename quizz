import React, { useState } from 'react';
import { Play, Plus, Save, ArrowLeft, Trophy, RotateCcw } from 'lucide-react';

const QuizApp = () => {
  const [currentView, setCurrentView] = useState('home');
  const [savedQuizzes, setSavedQuizzes] = useState([]);
  const [currentQuiz, setCurrentQuiz] = useState(null);
  const [gameState, setGameState] = useState({
    currentQuestion: 0,
    score: 0,
    answers: [],
    showResult: false,
    selectedAnswer: null,
    showFeedback: false
  });

  // √âtats pour la cr√©ation de quiz
  const [newQuiz, setNewQuiz] = useState({
    title: '',
    description: '',
    questions: []
  });
  const [currentQuestion, setCurrentQuestion] = useState({
    question: '',
    options: ['', '', '', ''],
    correctAnswer: 0,
    timeLimit: 30
  });

  const resetQuizCreator = () => {
    setNewQuiz({
      title: '',
      description: '',
      questions: []
    });
    setCurrentQuestion({
      question: '',
      options: ['', '', '', ''],
      correctAnswer: 0,
      timeLimit: 30
    });
  };

  const addQuestion = () => {
    if (currentQuestion.question.trim() && currentQuestion.options.every(opt => opt.trim())) {
      setNewQuiz(prev => ({
        ...prev,
        questions: [...prev.questions, { ...currentQuestion }]
      }));
      setCurrentQuestion({
        question: '',
        options: ['', '', '', ''],
        correctAnswer: 0,
        timeLimit: 30
      });
    }
  };

  const saveQuiz = () => {
    if (newQuiz.title.trim() && newQuiz.questions.length > 0) {
      const quiz = {
        id: Date.now(),
        ...newQuiz,
        createdAt: new Date().toLocaleDateString('fr-FR')
      };
      setSavedQuizzes(prev => [...prev, quiz]);
      resetQuizCreator();
      setCurrentView('home');
    }
  };

  const startQuiz = (quiz) => {
    setCurrentQuiz(quiz);
    setGameState({
      currentQuestion: 0,
      score: 0,
      answers: [],
      showResult: false,
      selectedAnswer: null,
      showFeedback: false
    });
    setCurrentView('playing');
  };

  const selectAnswer = (answerIndex) => {
    if (gameState.selectedAnswer !== null) return;
    
    setGameState(prev => ({ ...prev, selectedAnswer: answerIndex }));
    
    setTimeout(() => {
      const isCorrect = answerIndex === currentQuiz.questions[gameState.currentQuestion].correctAnswer;
      const newScore = isCorrect ? gameState.score + 100 : gameState.score;
      
      setGameState(prev => ({
        ...prev,
        score: newScore,
        answers: [...prev.answers, { questionIndex: prev.currentQuestion, selectedAnswer: answerIndex, isCorrect }],
        showFeedback: true
      }));

      setTimeout(() => {
        if (gameState.currentQuestion + 1 < currentQuiz.questions.length) {
          setGameState(prev => ({
            ...prev,
            currentQuestion: prev.currentQuestion + 1,
            selectedAnswer: null,
            showFeedback: false
          }));
        } else {
          setGameState(prev => ({ ...prev, showResult: true }));
        }
      }, 2000);
    }, 500);
  };

  const restartQuiz = () => {
    setGameState({
      currentQuestion: 0,
      score: 0,
      answers: [],
      showResult: false,
      selectedAnswer: null,
      showFeedback: false
    });
  };

  // Couleurs pour les options (style Kahoot)
  const optionColors = [
    'bg-red-500 hover:bg-red-600',
    'bg-blue-500 hover:bg-blue-600', 
    'bg-yellow-500 hover:bg-yellow-600',
    'bg-green-500 hover:bg-green-600'
  ];

  const optionShapes = ['üî∫', 'üî∑', '‚≠ê', 'üî¥'];

  if (currentView === 'home') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-teal-500 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-6xl font-bold text-white mb-4">QuizMaster</h1>
            <p className="text-xl text-white/90">Cr√©ez et jouez √† des quiz interactifs !</p>
          </div>

          <div className="grid md:grid-cols-2 gap-6 mb-8">
            <button 
              onClick={() => setCurrentView('create')}
              className="bg-white rounded-3xl p-8 shadow-2xl hover:shadow-3xl transform hover:scale-105 transition-all duration-300"
            >
              <Plus className="w-16 h-16 text-purple-600 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-gray-800 mb-2">Cr√©er un Quiz</h2>
              <p className="text-gray-600">Concevez vos propres questions interactives</p>
            </button>

            <button 
              onClick={() => setCurrentView('quizzes')}
              className="bg-white rounded-3xl p-8 shadow-2xl hover:shadow-3xl transform hover:scale-105 transition-all duration-300"
            >
              <Play className="w-16 h-16 text-blue-600 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-gray-800 mb-2">Mes Quiz</h2>
              <p className="text-gray-600">Jouez √† vos quiz sauvegard√©s</p>
              <div className="mt-4">
                <span className="bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full">
                  {savedQuizzes.length} quiz{savedQuizzes.length !== 1 ? 's' : ''} disponible{savedQuizzes.length !== 1 ? 's' : ''}
                </span>
              </div>
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'create') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-orange-500 via-red-500 to-pink-500 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-3xl shadow-2xl p-8">
            <div className="flex items-center justify-between mb-6">
              <button 
                onClick={() => setCurrentView('home')}
                className="flex items-center text-gray-600 hover:text-gray-800 transition-colors"
              >
                <ArrowLeft className="w-5 h-5 mr-2" />
                Retour
              </button>
              <h1 className="text-3xl font-bold text-gray-800">Cr√©ateur de Quiz</h1>
              <div></div>
            </div>

            <div className="grid md:grid-cols-2 gap-8">
              <div>
                <h2 className="text-xl font-semibold mb-4 text-gray-800">Informations du Quiz</h2>
                <div className="space-y-4">
                  <input
                    type="text"
                    placeholder="Titre du quiz"
                    value={newQuiz.title}
                    onChange={(e) => setNewQuiz(prev => ({ ...prev, title: e.target.value }))}
                    className="w-full p-3 border-2 border-gray-300 rounded-xl focus:border-orange-500 outline-none transition-colors"
                  />
                  <textarea
                    placeholder="Description (optionnel)"
                    value={newQuiz.description}
                    onChange={(e) => setNewQuiz(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full p-3 border-2 border-gray-300 rounded-xl focus:border-orange-500 outline-none transition-colors h-24"
                  />
                </div>

                <h3 className="text-lg font-semibold mt-6 mb-4 text-gray-800">Questions ajout√©es ({newQuiz.questions.length})</h3>
                <div className="space-y-2 max-h-48 overflow-y-auto">
                  {newQuiz.questions.map((q, index) => (
                    <div key={index} className="bg-gray-100 p-3 rounded-lg">
                      <p className="font-medium text-sm">{index + 1}. {q.question}</p>
                      <p className="text-xs text-green-600 mt-1">‚úì {q.options[q.correctAnswer]}</p>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h2 className="text-xl font-semibold mb-4 text-gray-800">Nouvelle Question</h2>
                <div className="space-y-4">
                  <input
                    type="text"
                    placeholder="Votre question"
                    value={currentQuestion.question}
                    onChange={(e) => setCurrentQuestion(prev => ({ ...prev, question: e.target.value }))}
                    className="w-full p-3 border-2 border-gray-300 rounded-xl focus:border-orange-500 outline-none transition-colors"
                  />

                  {currentQuestion.options.map((option, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <input
                        type="radio"
                        name="correctAnswer"
                        checked={currentQuestion.correctAnswer === index}
                        onChange={() => setCurrentQuestion(prev => ({ ...prev, correctAnswer: index }))}
                        className="w-4 h-4 text-green-600"
                      />
                      <input
                        type="text"
                        placeholder={`Option ${index + 1}`}
                        value={option}
                        onChange={(e) => {
                          const newOptions = [...currentQuestion.options];
                          newOptions[index] = e.target.value;
                          setCurrentQuestion(prev => ({ ...prev, options: newOptions }));
                        }}
                        className="flex-1 p-3 border-2 border-gray-300 rounded-xl focus:border-orange-500 outline-none transition-colors"
                      />
                    </div>
                  ))}

                  <button 
                    onClick={addQuestion}
                    className="w-full bg-orange-500 text-white p-3 rounded-xl hover:bg-orange-600 transition-colors font-semibold"
                  >
                    Ajouter cette question
                  </button>
                </div>
              </div>
            </div>

            <div className="flex justify-center mt-8">
              <button 
                onClick={saveQuiz}
                disabled={!newQuiz.title.trim() || newQuiz.questions.length === 0}
                className="flex items-center bg-green-500 text-white px-8 py-4 rounded-xl hover:bg-green-600 transition-colors font-semibold text-lg disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                <Save className="w-5 h-5 mr-2" />
                Sauvegarder le Quiz ({newQuiz.questions.length} questions)
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'quizzes') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-500 via-teal-500 to-blue-500 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center justify-between mb-8">
            <button 
              onClick={() => setCurrentView('home')}
              className="flex items-center text-white hover:text-white/80 transition-colors"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              Retour
            </button>
            <h1 className="text-4xl font-bold text-white">Mes Quiz</h1>
            <div></div>
          </div>

          {savedQuizzes.length === 0 ? (
            <div className="bg-white rounded-3xl p-12 text-center shadow-2xl">
              <div className="text-6xl mb-4">üìù</div>
              <h2 className="text-2xl font-bold text-gray-800 mb-4">Aucun quiz cr√©√©</h2>
              <p className="text-gray-600 mb-6">Commencez par cr√©er votre premier quiz !</p>
              <button 
                onClick={() => setCurrentView('create')}
                className="bg-green-500 text-white px-6 py-3 rounded-xl hover:bg-green-600 transition-colors font-semibold"
              >
                Cr√©er un quiz
              </button>
            </div>
          ) : (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {savedQuizzes.map((quiz) => (
                <div key={quiz.id} className="bg-white rounded-3xl p-6 shadow-2xl hover:shadow-3xl transform hover:scale-105 transition-all duration-300">
                  <h3 className="text-xl font-bold text-gray-800 mb-2">{quiz.title}</h3>
                  {quiz.description && (
                    <p className="text-gray-600 mb-4 text-sm">{quiz.description}</p>
                  )}
                  <div className="flex justify-between items-center mb-4">
                    <span className="bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full">
                      {quiz.questions.length} questions
                    </span>
                    <span className="text-gray-500 text-sm">{quiz.createdAt}</span>
                  </div>
                  <button 
                    onClick={() => startQuiz(quiz)}
                    className="w-full bg-gradient-to-r from-green-500 to-teal-500 text-white p-3 rounded-xl hover:from-green-600 hover:to-teal-600 transition-all font-semibold flex items-center justify-center"
                  >
                    <Play className="w-5 h-5 mr-2" />
                    Jouer
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  }

  if (currentView === 'playing') {
    const question = currentQuiz.questions[gameState.currentQuestion];
    
    if (gameState.showResult) {
      const correctAnswers = gameState.answers.filter(a => a.isCorrect).length;
      const percentage = Math.round((correctAnswers / currentQuiz.questions.length) * 100);
      
      return (
        <div className="min-h-screen bg-gradient-to-br from-purple-600 via-pink-600 to-red-500 p-4 flex items-center justify-center">
          <div className="bg-white rounded-3xl p-12 text-center shadow-2xl max-w-2xl w-full">
            <Trophy className="w-20 h-20 text-yellow-500 mx-auto mb-6" />
            <h1 className="text-4xl font-bold text-gray-800 mb-4">Quiz Termin√© !</h1>
            <div className="text-6xl font-bold text-purple-600 mb-4">{gameState.score}</div>
            <p className="text-xl text-gray-600 mb-2">Score final</p>
            <p className="text-lg text-gray-600 mb-8">
              {correctAnswers}/{currentQuiz.questions.length} bonnes r√©ponses ({percentage}%)
            </p>
            
            <div className="space-y-4">
              <button 
                onClick={restartQuiz}
                className="flex items-center justify-center w-full bg-purple-500 text-white p-4 rounded-xl hover:bg-purple-600 transition-colors font-semibold text-lg"
              >
                <RotateCcw className="w-5 h-5 mr-2" />
                Rejouer
              </button>
              <button 
                onClick={() => setCurrentView('quizzes')}
                className="w-full bg-gray-500 text-white p-4 rounded-xl hover:bg-gray-600 transition-colors font-semibold text-lg"
              >
                Retour aux quiz
              </button>
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-600 via-purple-600 to-pink-600 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-t-3xl p-6 shadow-2xl">
            <div className="flex justify-between items-center mb-4">
              <div className="flex items-center space-x-4">
                <span className="bg-indigo-100 text-indigo-800 px-4 py-2 rounded-full font-semibold">
                  Question {gameState.currentQuestion + 1}/{currentQuiz.questions.length}
                </span>
                <span className="bg-green-100 text-green-800 px-4 py-2 rounded-full font-semibold">
                  Score: {gameState.score}
                </span>
              </div>
              <button 
                onClick={() => setCurrentView('quizzes')}
                className="text-gray-500 hover:text-gray-700"
              >
                <ArrowLeft className="w-6 h-6" />
              </button>
            </div>
            
            <div className="w-full bg-gray-200 rounded-full h-3 mb-6">
              <div 
                className="bg-gradient-to-r from-indigo-500 to-purple-500 h-3 rounded-full transition-all duration-500"
                style={{ width: `${((gameState.currentQuestion + 1) / currentQuiz.questions.length) * 100}%` }}
              ></div>
            </div>
          </div>

          <div className="bg-white rounded-b-3xl p-8 shadow-2xl">
            <h2 className="text-3xl font-bold text-center text-gray-800 mb-8">{question.question}</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {question.options.map((option, index) => {
                let buttonClass = `${optionColors[index]} text-white p-6 rounded-2xl font-bold text-lg transition-all duration-300 transform hover:scale-105 flex items-center justify-center space-x-3`;
                
                if (gameState.showFeedback) {
                  if (index === question.correctAnswer) {
                    buttonClass = 'bg-green-500 text-white p-6 rounded-2xl font-bold text-lg flex items-center justify-center space-x-3 animate-pulse';
                  } else if (index === gameState.selectedAnswer && index !== question.correctAnswer) {
                    buttonClass = 'bg-red-500 text-white p-6 rounded-2xl font-bold text-lg flex items-center justify-center space-x-3';
                  }
                }
                
                return (
                  <button
                    key={index}
                    onClick={() => selectAnswer(index)}
                    disabled={gameState.selectedAnswer !== null}
                    className={buttonClass}
                  >
                    <span className="text-2xl">{optionShapes[index]}</span>
                    <span>{option}</span>
                  </button>
                );
              })}
            </div>
            
            {gameState.showFeedback && (
              <div className="mt-8 p-6 rounded-2xl text-center">
                {gameState.selectedAnswer === question.correctAnswer ? (
                  <div className="text-green-600">
                    <div className="text-4xl mb-2">üéâ</div>
                    <p className="text-2xl font-bold">Bravo ! +100 points</p>
                  </div>
                ) : (
                  <div className="text-red-600">
                    <div className="text-4xl mb-2">üòû</div>
                    <p className="text-2xl font-bold">Incorrect</p>
                    <p className="text-lg mt-2">La bonne r√©ponse √©tait : {question.options[question.correctAnswer]}</p>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  return null;
};

export default QuizApp;
